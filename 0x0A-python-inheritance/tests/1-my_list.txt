The ```1-my_list``` module
============================

Using ``MyList``

First import the class
    >>> MyList = __import__("1-my_list").MyList

Success case:

Test for module docstring:
    >>> m = __import__("1-my_list").__doc__
    >>> len(m) > 1
    True

Test for class docstring:
    >>> m = __import__("1-my_list").MyList.__doc__ 
    >>> len(m) > 1
    True
  
Test for instance method docstring:
    >>> m = __import__("1-my_list").MyList.print_sorted.__doc__ 
    >>> len(m) > 1
    True

Test for integer list:
    >>> my_list = MyList()                                                                  
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list = MyList([3, 1, 0, -8, 9])
    >>> print(my_list)
    [3, 1, 0, -8, 9]
    >>> my_list.print_sorted()
    [-8, 0, 1, 3, 9]
    >>> print(my_list)
    [3, 1, 0, -8, 9]

Test for different datatype:
    >>> my_list = MyList((6, 4, 5))
    >>> print(my_list)
    [6, 4, 5]
    >>> my_list.print_sorted()
    [4, 5, 6]
    >>> print(my_list)
    [6, 4, 5]
    >>> my_list = MyList("hello buddy")
    >>> print(my_list)
    ['h', 'e', 'l', 'l', 'o', ' ', 'b', 'u', 'd', 'd', 'y']
    >>> my_list.print_sorted()
    [' ', 'b', 'd', 'd', 'e', 'h', 'l', 'l', 'o', 'u', 'y']
    >>> print(my_list)
    ['h', 'e', 'l', 'l', 'o', ' ', 'b', 'u', 'd', 'd', 'y']
  
Test list with only one element:
    >>> my_list = MyList([45])
    >>> print(my_list)
    [45]
    >>> my_list.print_sorted()
    [45]
    >>> print(my_list)
    [45]

Test list with no element:
    >>> my_list = MyList()
    >>> print(my_list)
    []
    >>> my_list.print_sorted()
    []
    >>> print(my_list)
    []

Test for empty list:
    >>> my_list = MyList([])
    >>> print(my_list)
    []
    >>> my_list.print_sorted()
    []
    >>> print(my_list)
    []

Fail case:

Test for None entery:
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    ...
    TypeError: 'NoneType' object is not iterable
